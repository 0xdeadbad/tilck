#!/usr/bin/python

import os
import re
import sys
import time
import signal
import subprocess
import threading

error_codes_strings = {
   0: 'success',
   1: 'invalid_arguments',
   2: 'reboot',
   3: 'timeout',
   4: 'panic',
   5: 'shell_no_zero_exit'
}


shell_cmd_tests = [
   ['invalid_read', 2],
   ['sysenter', 2],
   ['syscall_perf', 2],
   ['loop', 8],
   ['fork_test', 8],
   ['sysenter_fork_test', 8],
   ['fork_perf', 14],
]

selftests = [
   ['fault_resumable', 2],
   ['fault_resumable_perf', 2],
   ['tasklet', 2],
   ['kernel_sleep', 2],
   ['kmalloc_perf', 2],
   ['kmutex', 8],
   ['kthread', 8],
]

def run_test(test_type, test, timeout):

   print "[ RUNNING ] {0}: '{1}' [timeout: {2}]".format(test_type, x[0], x[1])
   start_time = time.time()

   try:
      output = subprocess.check_output(['./system_tests/runtest',
                                        test_type,
                                        test,
                                        str(timeout)],
                                        stderr=subprocess.STDOUT)
   except subprocess.CalledProcessError as e:
      elapsed = time.time() - start_time
      print e.output
      print "[ FAILED  ] after %.2f seconds with: %s\n" % \
            (elapsed, error_codes_strings[e.returncode])
      return False

   elapsed = time.time() - start_time
   print "[ PASSED  ] after %.2f seconds\n" % elapsed
   return True

################################################################################

print "\n*********** MASTER EXOS SYSTEM TESTS RUNNER ************\n"

max_test_timeout = 8

selftests_to_run = 0
selftests_passed = 0

shell_cmd_tests_to_run = 0
shell_cmd_tests_passed = 0

if len(sys.argv) == 2:
   max_test_timeout = int(sys.argv[1])

for x in selftests:
   if x[1] <= max_test_timeout:
      selftests_to_run += 1
      if run_test('selftest', x[0], x[1]):
         selftests_passed += 1

for x in shell_cmd_tests:
   if x[1] <= max_test_timeout:
      shell_cmd_tests_to_run += 1
      if run_test('shellcmd', x[0], x[1]):
         shell_cmd_tests_passed += 1

print "-" * 80, "\n"
print "Shell cmd tests passed: {0}/{1}".format(shell_cmd_tests_passed,
                                               shell_cmd_tests_to_run)

print "Selftests passed: {0}/{1}".format(selftests_passed,
                                         selftests_to_run)
