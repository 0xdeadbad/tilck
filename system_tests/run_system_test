#!/usr/bin/python

import os
import re
import sys
import time
import signal
import subprocess
import threading

TEST_TIMEOUT = 20
VM_MEMORY_SIZE_IN_MB = 256
KERNEL_HELLO_MSG = 'Hello from exOS!'
KERNEL_FILE = './build/elf_kernel_stripped'
FATPART_FILE = './build/fatpart'

output = ""
process = None
failed = False
hello_msg_found = False
shell_exit_code = -1

def RunTheVM():

   global output
   global process
   global failed
   global hello_msg_found
   global shell_exit_code



   args = ['qemu-system-i386',
           '-m', str(VM_MEMORY_SIZE_IN_MB),
           '-kernel', KERNEL_FILE,
           '-nographic', '-device',
           'isa-debug-exit,iobase=0xf4,iosize=0x04']

   if not os.environ.get('TRAVIS', False):
      args.append('-enable-kvm')

   if sys.argv[1] == 'shellcmd':

      print "Running the VM with shell command '{0}'...".format(sys.argv[1])

      args += ['-initrd', FATPART_FILE,
               '-append', '-cmd /sbin/init -- -c {0}'.format(sys.argv[2])]

   elif sys.argv[1] == 'selftest':

      print "Running the VM with selftest '{0}'...".format(sys.argv[1])
      args += ['-append', '-s={0}'.format(sys.argv[2])]

   else:
      sys.exit(1)

   print "-"*80, "\n"
   process = subprocess.Popen(args, stdout=subprocess.PIPE)

   for line in iter(process.stdout.readline,''):
      output += line
      stripped = line.rstrip()

      print stripped

      m = re.search(r'\[init\] the shell exited with status: ([0-9]+)',
                    stripped)

      if m:
         shell_exit_code = int(m.group(1))
         continue

      if stripped.find(KERNEL_HELLO_MSG) != -1:
         if not hello_msg_found:
            hello_msg_found = True
         else:
            print "\n[system test runner] Detected TWICE the kernel " + \
                  "hello msg: likely the machine rebooted."
            print "[system test runner] KILLING the VM."

            failed = True
            process.send_signal(signal.SIGINT)
         continue

   print "\n"
   print "-"*80

###############################################################################
# MAIN

def show_help_and_exit():
   print "Syntax: "
   print "  run_system_test selftest <selftest name>"
   print "  run_system_test shellcmd <shell cmd name>"
   sys.exit(1)


if len(sys.argv) < 3:
   show_help_and_exit()

if sys.argv[1] not in ['selftest', 'shellcmd']:
   show_help_and_exit()

start_time = time.time()

thread = threading.Thread(target = RunTheVM)
thread.start()
thread.join(TEST_TIMEOUT)

if thread.is_alive():
   failed = True

   print "The VM is alive after the timeout " + \
         "of {0} seconds. KILLING IT.".format(TEST_TIMEOUT)

   process.send_signal(signal.SIGINT)
   thread.join()

elapsed = time.time() - start_time

if output.find("KERNEL PANIC") != -1:
   failed = True

if shell_exit_code != 0:
   print "Note: shell exited with code {0}.".format(shell_exit_code)
   failed = True

if failed:
   print "TEST FAILED after %.2f seconds" % elapsed
   sys.exit(1)

print "TEST PASSED in %.2f seconds" % elapsed
sys.exit(0)

