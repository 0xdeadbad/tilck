#!/usr/bin/python

import os
import re
import sys
import time
import signal
import subprocess
import threading

# Fail codes:
FAIL_SUCCESS = 0
FAIL_REBOOT = 2
FAIL_TIMEOUT = 3
FAIL_PANIC = 4
FAIL_SHELL_NO_ZERO_EXIT = 5
##################################

TEST_TIMEOUT = 8
TEST_TYPE = None

VM_MEMORY_SIZE_IN_MB = int(os.environ.get('TILCK_VM_MEM', '128'))
KERNEL_HELLO_MSG = 'Hello from Tilck!'
KERNEL_FILE = '@KERNEL_FILE@'
FATPART_FILE = '@CMAKE_BINARY_DIR@/fatpart'


output = ""
process = None
failed = FAIL_SUCCESS
hello_msg_found = False
shell_exit_code = -1

in_travis = os.environ.get('TRAVIS', False)
in_circleci = os.environ.get('CIRCLECI', False)

def RunTheVM():

   global output
   global process
   global failed
   global hello_msg_found
   global shell_exit_code



   args = ['qemu-system-i386',
           '-m', str(VM_MEMORY_SIZE_IN_MB),
           '-kernel', KERNEL_FILE,
           '-nographic', '-device',
           'isa-debug-exit,iobase=0xf4,iosize=0x04']

   if not in_travis and not in_circleci:
      args.append('-enable-kvm')

   if TEST_TYPE == 'shellcmd':

      print "Running the VM with shell command '{0}'...".format(TEST_NAME)

      args += ['-initrd', FATPART_FILE,
               '-append', '-cmd /sbin/init -- -c {0}'.format(TEST_NAME)]

   elif TEST_TYPE == 'selftest':

      print "Running the VM with selftest '{0}'...".format(TEST_NAME)
      args += ['-append', '-s={0}'.format(TEST_NAME)]

   else:
      sys.exit(1)

   print "-"*80, "\n"
   process = subprocess.Popen(args, stdout=subprocess.PIPE)

   for line in iter(process.stdout.readline,''):

      output += line
      stripped = line.rstrip()
      print stripped

      m = re.search(r'\[init\] the devshell exited with status: ([0-9]+)',
                    stripped)

      if m:
         shell_exit_code = int(m.group(1))
         continue

      if stripped.find(KERNEL_HELLO_MSG) != -1:
         if not hello_msg_found:
            hello_msg_found = True
         else:
            print "\n[system test runner] Detected TWICE the kernel " + \
                  "hello msg: likely the machine rebooted."
            print "[system test runner] KILLING the VM."

            failed = FAIL_REBOOT
            process.send_signal(signal.SIGINT)
         continue

   print "-"*80

###############################################################################
# MAIN

def show_help_and_exit():
   print "Syntax: "
   print "  single_test_run selftest <name> <timeout>"
   print "  single_test_run shellcmd <name> <timeout>"
   sys.exit(1)

if len(sys.argv) < 4:
   show_help_and_exit()

if sys.argv[1] not in ['selftest', 'shellcmd']:
   show_help_and_exit()

TEST_TYPE = sys.argv[1]
TEST_NAME = sys.argv[2]
TEST_TIMEOUT = int(sys.argv[3])

thread = threading.Thread(target = RunTheVM)
thread.start()
thread.join(TEST_TIMEOUT)

if thread.is_alive():
   failed = FAIL_TIMEOUT

   print "[system test runner] The VM is alive after the timeout " + \
         "of {0} seconds. KILLING IT.".format(TEST_TIMEOUT)

   process.send_signal(signal.SIGINT)
   thread.join()

if output.find("KERNEL PANIC") != -1:
   failed = FAIL_PANIC

if sys.argv[1] == 'shellcmd' and failed == 0 and shell_exit_code != 0:
   print "Shell exited with code {0}.".format(shell_exit_code)
   failed = FAIL_SHELL_NO_ZERO_EXIT


sys.exit(failed)

