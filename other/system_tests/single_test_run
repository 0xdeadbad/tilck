#!/usr/bin/python
# SPDX-License-Identifier: BSD-2-Clause

import os
import re
import sys
import time
import signal
import subprocess
import threading
import struct
import zlib
import base64

# Constants

# Fail codes:
FAIL_SUCCESS = 0
FAIL_REBOOT = 2
FAIL_TIMEOUT = 3
FAIL_PANIC = 4
FAIL_SHELL_NO_ZERO_EXIT = 5
FAIL_GCOV_ERROR = 6

# Other constants
KERNEL_HELLO_MSG = 'Hello from Tilck!'
KERNEL_DUMP_GCDA_STR = '** GCOV gcda files **'
KERNEL_FILE = '@KERNEL_FILE@'
FATPART_FILE = '@CMAKE_BINARY_DIR@/fatpart'
GEN_KCOV_REPORT = '@CMAKE_BINARY_DIR@/scripts/generate_kernel_coverage_report'

# Environment config variables
VM_MEMORY_SIZE_IN_MB = int(os.environ.get('TILCK_VM_MEM', '128'))

# Environment flags
in_travis = os.environ.get('TRAVIS', False)
in_circleci = os.environ.get('CIRCLECI', False)
dump_coverage = os.environ.get('DUMP_COV', False)
report_coverage = os.environ.get('REPORT_COV', False)

# Global variables

# Controlled by command line
TEST_TYPE = None
TEST_TIMEOUT = 8

# Internal
output = ""
process = None
failed = FAIL_SUCCESS
hello_msg_found = False
shell_exit_code = -1
dumping_gcda_files = False
gcda_buf = None
gcda_file = None
notBase64Char = re.compile(r'[^A-Za-z0-9+/=]')

def write_gcda_file():

   global gcda_file, gcda_buf, failed, process

   try:

      orig_gcda_buf = gcda_buf
      gcda_buf = base64.b64decode(gcda_buf)
      gcda_buf = zlib.decompress(gcda_buf)

      with open(gcda_file, 'wb') as fh:
         fh.write(gcda_buf)

   except Exception as e:
      failed = FAIL_GCOV_ERROR
      print("\n[system test runner] While working on gcda file '{0}', "
            "got exception: {1}".format(gcda_file, str(e)))
      print("gcda_buf:\n<<{0}>>\n".format(orig_gcda_buf))
      process.send_signal(signal.SIGINT)

   finally:
      gcda_file = None
      gcda_buf = None

def HandleHelloMsg():

   global process
   global failed
   global hello_msg_found

   if not hello_msg_found:
      hello_msg_found = True
      return

   # Bad case
   print "\n[system test runner] Detected TWICE the kernel " + \
         "hello msg: likely the machine rebooted."
   print "[system test runner] KILLING the VM."

   failed = FAIL_REBOOT
   process.send_signal(signal.SIGINT)

def ProcessLine(line):

   global output
   global process
   global failed
   global hello_msg_found
   global shell_exit_code
   global dumping_gcda_files
   global gcda_buf
   global gcda_file

   stripped = line.rstrip()
   #print(stripped)

   if stripped and stripped[0] == '[' and stripped.startswith('[init]'):
      m = re.search(r'\[init\] the devshell exited with status: ([0-9]+)',
                    stripped)

      if m:
         shell_exit_code = int(m.group(1))
         dumping_gcda_files = False
         print(stripped)
         return

   if stripped.find(KERNEL_HELLO_MSG) != -1:
      HandleHelloMsg()
      return

   if not dumping_gcda_files:

      output += stripped + "\n"
      print(stripped)

      if stripped.find(KERNEL_DUMP_GCDA_STR) != -1:
         dumping_gcda_files = True
         return

      return

   # Dumping gcda file

   if not stripped:
      return

   if notBase64Char.search(stripped[0]):

      if gcda_file:
         write_gcda_file()

      dumping_gcda_files = False
      print(stripped)
      return

   m = re.search(r'file: (.+)', stripped)

   if m:

      if gcda_file:
         write_gcda_file()

      gcda_file = m.group(1)
      gcda_buf = ''

   else:
      gcda_buf += stripped

def RunTheVM():

   global output
   global process
   global failed
   global hello_msg_found
   global shell_exit_code
   global dumping_gcda_files
   global gcda_buf
   global gcda_file

   args = ['qemu-system-i386',
           '-m', str(VM_MEMORY_SIZE_IN_MB),
           '-kernel', KERNEL_FILE,
           '-nographic', '-device',
           'isa-debug-exit,iobase=0xf4,iosize=0x04']

   if not in_travis and not in_circleci:
      args.append('-enable-kvm')

   cmdline = '/bin/devshell'
   init_opts = ''

   if dump_coverage:
      cmdline += ' -dcov'
      init_opts = '-q '

   if TEST_TYPE == 'shellcmd':

      print "Running the VM with shell command '{0}'...".format(TEST_NAME)

      cmdline += ' -c ' + TEST_NAME
      args += ['-initrd', FATPART_FILE, '-append',
               '-cmd /sbin/init {0}-- {1}'.format(init_opts, cmdline)]

   elif TEST_TYPE == 'selftest':

      print "Running the VM with selftest '{0}'...".format(TEST_NAME)

      # New way of running self tests: asking the devshell to perform a
      # a tilck_testcmd() syscall for running any given self-test.

      cmdline += ' -c selftest ' + TEST_NAME
      args += ['-initrd', FATPART_FILE, '-append',
               '-cmd /sbin/init {0}-- {1}'.format(init_opts, cmdline)]

      # Old way of running self tests: direct option on kernel's cmdline.
      # args += ['-append', '-s {0}'.format(TEST_NAME)]

   else:
      sys.exit(1)

   print('-' * 80)
   print('\n')
   process = subprocess.Popen(args, stdout=subprocess.PIPE)

   for line in iter(process.stdout.readline,''):
      ProcessLine(line)

   print('-' * 80)

###############################################################################
# MAIN

def show_help_and_exit():
   print "Syntax: "
   print "  single_test_run selftest <name> <timeout>"
   print "  single_test_run shellcmd <name> <timeout>"
   sys.exit(1)

if len(sys.argv) < 4:
   show_help_and_exit()

if sys.argv[1] not in ['selftest', 'shellcmd']:
   show_help_and_exit()

TEST_TYPE = sys.argv[1]
TEST_NAME = sys.argv[2]
TEST_TIMEOUT = int(sys.argv[3])

thread = threading.Thread(target = RunTheVM)
thread.start()
thread.join(TEST_TIMEOUT)

if thread.is_alive():

   if dumping_gcda_files:
      thread.join(30)

   if thread.is_alive():
      failed = FAIL_TIMEOUT

      print "[system test runner] The VM is alive after the timeout " + \
            "of {0} seconds. KILLING IT.".format(TEST_TIMEOUT)

      process.send_signal(signal.SIGINT)
      thread.join()

if gcda_file:
   write_gcda_file()

if output.find("KERNEL PANIC") != -1:
   failed = FAIL_PANIC

if failed == FAIL_SUCCESS and shell_exit_code != 0:
   print "Shell exited with code {0}.".format(shell_exit_code)
   failed = FAIL_SHELL_NO_ZERO_EXIT

if dump_coverage and report_coverage:

   try:

      subprocess.check_output([GEN_KCOV_REPORT, '--acc'])

   except Exception as e:

      print("[system test runner] {0} generated "
            "the exception: {1}".format(GEN_KCOV_REPORT, str(e)))
      print("[system test runner] Output of {0} --acc:".format(GEN_KCOV_REPORT))
      print(e.output) # pylint: disable=E1101
      print("[system test runner] --- end output ---")
      sys.exit(FAIL_GCOV_ERROR)

sys.exit(failed)

