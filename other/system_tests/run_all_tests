#!/usr/bin/python

import os
import re
import sys
import time
import signal
import subprocess
import threading

error_codes_strings = {
   0: 'success',
   1: 'invalid_arguments',
   2: 'reboot',
   3: 'timeout',
   4: 'panic',
   5: 'shell_no_zero_exit'
}

SHORT_TEST_TIMEOUT = 12
MID_TEST_TIMEOUT   = 18
LONG_TEST_TIMEOUT  = 30

shell_cmd_tests = [
   ['invalid_read', SHORT_TEST_TIMEOUT],
   ['invalid_write', SHORT_TEST_TIMEOUT],
   ['brk_test', SHORT_TEST_TIMEOUT],
   ['sysenter', SHORT_TEST_TIMEOUT],
   ['syscall_perf', SHORT_TEST_TIMEOUT],
   ['fork_test', MID_TEST_TIMEOUT],
   ['sysenter_fork_test', MID_TEST_TIMEOUT],
   ['fork_perf', LONG_TEST_TIMEOUT],
]

selftests = [
   ['fault_resumable', SHORT_TEST_TIMEOUT],
   ['fault_resumable_perf', SHORT_TEST_TIMEOUT],
   ['tasklet', SHORT_TEST_TIMEOUT],
   ['tasklet_perf', SHORT_TEST_TIMEOUT],
   ['kernel_sleep', SHORT_TEST_TIMEOUT],
   ['alloc_pageframe_perf', SHORT_TEST_TIMEOUT],
   ['kcond', SHORT_TEST_TIMEOUT],
   ['kmalloc_perf', MID_TEST_TIMEOUT],
   ['join', MID_TEST_TIMEOUT],
   ['kmutex', MID_TEST_TIMEOUT],
   ['kthread', MID_TEST_TIMEOUT],
]

def run_test(test_type, test, timeout, show_output = False):

   print "[ RUNNING ] {0}: '{1}' [timeout: {2}]".format(test_type, x[0], x[1])
   start_time = time.time()

   try:
      output = subprocess.check_output(['@CMAKE_BINARY_DIR@/st/runtest',
                                        test_type,
                                        test,
                                        str(timeout)],
                                        stderr=subprocess.STDOUT)
   except subprocess.CalledProcessError as e:
      elapsed = time.time() - start_time
      print e.output
      print "[ FAILED  ] after %.2f seconds with: %s\n" % \
            (elapsed, error_codes_strings[e.returncode])
      return False

   elapsed = time.time() - start_time

   if show_output:
      print output

   print "[ PASSED  ] after %.2f seconds\n" % elapsed
   return True

def show_help_and_exit():
   print "Syntax:"
   print "     ./system_tests/run_all_tests --show-all"
   print "     ./system_tests/run_all_tests [-o] [<max_timeout>]"
   print "     ./system_tests/run_all_tests [-o] <regex> [<max_timeout>]"
   sys.exit(1)

def show_tests_and_exit():

   col_names = [['test name', 30], ['test type', 12],  ['timeout', 10]]

   for x in col_names:
      sys.stdout.write('+-')
      sys.stdout.write(''.center(x[1], '-'))
   sys.stdout.write('+\n')

   for x in col_names:
      sys.stdout.write('| ')
      sys.stdout.write(x[0].center(x[1], ' '))
   sys.stdout.write('|\n')

   for x in col_names:
      sys.stdout.write('+-')
      sys.stdout.write(''.center(x[1], '-'))
   sys.stdout.write('+\n')

   for x in selftests:
      sys.stdout.write('| ')
      sys.stdout.write(x[0].ljust(col_names[0][1]))
      sys.stdout.write('| ')
      sys.stdout.write('self test'.ljust(col_names[1][1]))
      sys.stdout.write('| ')
      sys.stdout.write(str(x[1]).ljust(col_names[2][1]))
      sys.stdout.write('|\n')

   for x in shell_cmd_tests:
      sys.stdout.write('| ')
      sys.stdout.write(x[0].ljust(col_names[0][1]))
      sys.stdout.write('| ')
      sys.stdout.write('shell cmd'.ljust(col_names[1][1]))
      sys.stdout.write('| ')
      sys.stdout.write(str(x[1]).ljust(col_names[2][1]))
      sys.stdout.write('|\n')

   for x in col_names:
      sys.stdout.write('+-')
      sys.stdout.write(''.center(x[1], '-'))
   sys.stdout.write('+\n')

   sys.stdout.write('\n')
   sys.exit(0)

################################################################################
# MAIN

#############################
# options
max_test_timeout = MID_TEST_TIMEOUT
reg = ".*"
show_output = False
##############################

selftests_to_run = 0
selftests_passed = 0
shell_cmd_tests_to_run = 0
shell_cmd_tests_passed = 0

print ""

if len(sys.argv) >= 2:

   if sys.argv[1] == '--show-all':
      show_tests_and_exit()

   if sys.argv[1] == '-o':
      show_output = True
      del sys.argv[1]

   if sys.argv[1].startswith('-'):
      show_help_and_exit()

   try:
      max_test_timeout = int(sys.argv[1])
   except:
      reg = sys.argv[1]

   if len(sys.argv) >= 3:
      try:
         max_test_timeout = int(sys.argv[2])
      except:
         show_help_and_exit()

for x in selftests:
   if re.match(reg, x[0]):
      if x[1] <= max_test_timeout:
         selftests_to_run += 1
         if run_test('selftest', x[0], x[1], show_output):
            selftests_passed += 1

for x in shell_cmd_tests:
   if re.match(reg, x[0]):
      if x[1] <= max_test_timeout:
         shell_cmd_tests_to_run += 1
         if run_test('shellcmd', x[0], x[1], show_output):
            shell_cmd_tests_passed += 1

print "-" * 80, "\n"

if shell_cmd_tests_to_run:
   print "Shell cmd tests passed: {0}/{1}".format(shell_cmd_tests_passed,
                                                  shell_cmd_tests_to_run)

if selftests_to_run:
   print "Selftests passed: {0}/{1}".format(selftests_passed,
                                            selftests_to_run)

total_to_run = shell_cmd_tests_to_run + selftests_to_run
total_passed = shell_cmd_tests_passed + selftests_passed

if total_passed != total_to_run:
   sys.exit(1)
