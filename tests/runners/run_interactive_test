#!/usr/bin/python3
# SPDX-License-Identifier: BSD-2-Clause
# pylint: disable=unused-wildcard-import

import os
import re
import sys
import time
import gzip
import signal
import subprocess
import threading
import struct
import fcntl
import filecmp
import traceback
from collections import namedtuple

# Constants coming from CMake (this file gets pre-processed by CMake)
RUNNERS_DIR = "@CMAKE_SOURCE_DIR@/tests/runners"
INTERACTIVE_TESTS = "@CMAKE_SOURCE_DIR@/tests/interactive"
INTERACTIVE_EXP = "@CMAKE_SOURCE_DIR@/tests/interactive/expected"
TILCK_IMAGE = "@IMG_FILE@"
TMP_DIR = "@CMAKE_BINARY_DIR@/tmp"
PNM2TEXT = "@CMAKE_BINARY_DIR@/scripts/build_apps/pnm2text"
FONT_FILE = "@CMAKE_SOURCE_DIR@/modules/fb/font8x16.psf"

CMAKE_CONFIG = {
   "EXTRA_VIM" : ("@EXTRA_VIM@", True),
   "FB_CONSOLE_BANNER" : ("@FB_CONSOLE_BANNER@", False),
   "FB_CONSOLE_BLINK" : ("@FB_CONSOLE_BLINK@", False),
   "FB_CONSOLE_USE_ALT_FONTS" : ("@FB_CONSOLE_USE_ALT_FONTS@", False),
   "SERIAL_CON_IN_VIDEO_MODE" : ("@SERIAL_CON_IN_VIDEO_MODE@", True),
   "BOOTLOADER_LEGACY" : ("@BOOTLOADER_LEGACY@", True),
   "MOD_console" : ("@MOD_console@", True),
   "MOD_serial" : ("@MOD_serial@", True),
   "MOD_fb" : ("@MOD_fb@", True),
   "MOD_kb8042" : ("@MOD_kb8042@", True)
}

sys.path.append(RUNNERS_DIR)
from lib import qemu
from lib.utils import *
from lib.detect_kvm import *
from lib.env import *

# Other constants
STABLE_SCREENSHOT_DELAY   = 0.25
STABLE_SCREENSHOT_TIMEOUT = 3.00

# Exceptions

class StableScreenshotFailure(Exception):
   def __init__(self):
      msg = "Unable to take a stable screenshot in {}s"
      msg = msg.format(STABLE_SCREENSHOT_TIMEOUT)
      super(StableScreenshotFailure, self).__init__(msg)

class ConvertFailure(Exception):
   def __init__(self, msg):
      super(ConvertFailure, self).__init__(msg)

class Pnm2TextFailure(Exception):
   def __init__(self, ret):
      super(Pnm2TextFailure, self).__init__("Return code: {}".format(ret))

class IntTestScreenTextCheckFailure(Exception):
   def __init__(self, screen_text):
      super(IntTestScreenTextCheckFailure, self)    \
         .__init__("IntTestScreenTextCheckFailure")
      self.screen_text = screen_text

# Environment config variables
VM_MEMORY_SIZE_IN_MB = int(os.environ.get('TILCK_VM_MEM', '128'))
GEN_TEST_DATA = os.getenv('GEN_TEST_DATA', '0') == '1'

# Global state variables
g_process = None
g_fail_reason = Fail.success
g_dumping_gcda_files = False
g_timeout = 60
g_next_screenshot = 0
g_tests = {}
g_before_run_func = lambda: None
g_filter_regex = None

def set_once_qemu_process(p):
   global g_process
   assert(g_process is None)
   g_process = p

def set_once_fail_reason(reason: Fail):

   global g_fail_reason

   if g_fail_reason == Fail.success:
      g_fail_reason = reason

def check_cmake_config():

   for k in CMAKE_CONFIG:

      pair = CMAKE_CONFIG[k]
      val, exp = is_cmake_opt_enabled(pair[0]), pair[1]

      if val != exp:
         msg_print("INVALID CONFIG: expected {} to be `{}`".format(k, exp))

         if g_fail_reason == Fail.success:
            set_once_fail_reason(Fail.invalid_build_config)

   if g_fail_reason != Fail.success:
      sys.exit(g_fail_reason.value)

def wait_for_qemu_to_exit():
   while g_process.poll() is None:
      time.sleep(0.1)

def recv_from_qemu_monitor():

   read_anything = False
   bbuf = b''

   while True:

      btext = g_process.stdout.read()

      # Is there any new text?
      if btext:
         bbuf += btext
         read_anything = True
         time.sleep(0.05)
         continue

      # Nope. Did we read anything in the previous iteration?
      if read_anything:
         return bbuf.decode('latin-1') # yep, return.

      # Nope. Is the VM still alive?
      if g_process.poll() is not None:
         return '' # Nope. Return an empty string

      # Yep. Wait for some text
      time.sleep(0.1)

# Handle the escape sequences used by QEMU's monitor.
#
# NOTE: for performance and simplicity, this code has NOT been designed to
# handle any kind of ANSI sequences, not even by just skipping them.
# It assumes that QEMU's input something like:
#
#     qESC[KESC[DquESC[KESC[DESC[DquiESC[KESC[DESC[DESC[DquitESC[K
#
# What's that
# ------------
#
# It starts with a regular character. After that ESC[K is used to clear the rest
# of the console's row and than ESC[D is used to move back by 1 column, after
# which the regular character (q) is re-written and then followed by the next
# regular character (u). The same steps are repeated for the following chars
# with the only detail that every time the number of ESC[D increases by 1.
#
# What we do
# -------------
#
# Well, after observing that the string always finishes with ESC[K preceeded by
# the a whole substring of regular text, we cheat in the most barbaric way
# possible by:
#
# 1. Skipping the ESC[K sequences. They're useless in this context.
# 2. Split the new string by ESC[D
# 3. Take the last element of that list

def qemu_process_tty_text(ttytext):
   ttytext = ttytext.replace("\033[K", "")
   seq = ttytext.split("\033[D")
   return seq[-1]

def echo_qemu_monitor():
   tty_text = recv_from_qemu_monitor()
   text = qemu_process_tty_text(tty_text)
   raw_stdout_write(text)

def send_to_qemu_monitor(cmd, delay = 0.2):
   g_process.stdin.raw.write("{}\n".format(cmd).encode('latin-1'))
   time.sleep(delay)
   echo_qemu_monitor()

def send_single_key_to_vm(key):

   key_name = None

   if not key:
      return

   if len(key) > 1:
      key_name = key
   else:
      key_name = qemu.KEYS_MAP.get(key, None)

   if key_name is not None:
      send_to_qemu_monitor("sendkey " + key_name, 0.05)

def send_string_to_vm(s):

   in_special_key = False
   spk = ""

   for k in s:

      if in_special_key:

         if k == "}":
            send_single_key_to_vm(spk)
            in_special_key = False
            spk = ""
            continue

         spk += k

      else:

         if k == "{":
            in_special_key = True
            continue

         send_single_key_to_vm(k)

def delete_old_screenshots():

   for f in os.listdir():

      if not os.path.isfile(f):
         continue

      if re.match("s[0-9]+[.](ppm|pbm|png)", f):
         os.remove(f)

# NOTE: unused function
def img_convert(img, newtype):

   cmd = ["convert"]

   if newtype == "pbm":
      cmd += [
         "-filter", "catrom",
         "-colorspace", "gray", "+dither",
         "-colors", "2",
         "-negate"
      ]

   name, ext = os.path.splitext(img) #pylint: disable=unused-variable
   new_name = name + "." + newtype

   cmd.append(img)
   cmd.append("-strip")
   cmd.append(new_name)
   res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

   if res.returncode != 0:
      out = res.stdout.decode('utf-8')
      err = res.stderr.decode('utf-8')
      raise ConvertFailure("stdout: '{}'\nstderr: '{}'".format(out, err))

   return new_name

def screenshot_to_text(img):

   cmd = [PNM2TEXT, "-q", FONT_FILE, img]
   res = subprocess.run(cmd, stdout=subprocess.PIPE)

   if res.returncode != 0:
      raise Pnm2TextFailure(res.returncode)

   return res.stdout.decode('utf-8')

def vm_take_screenshot():

   global g_next_screenshot

   name = "s{:03}".format(g_next_screenshot)
   ppm_name = name + ".ppm"
   send_to_qemu_monitor("screendump " + ppm_name)
   g_next_screenshot += 1
   return ppm_name

def vm_take_stable_screenshot():

   time_elapsed = 0.0
   prevs = [vm_take_screenshot()]
   curr = None

   while True:

      time_elapsed += STABLE_SCREENSHOT_DELAY

      if time_elapsed >= STABLE_SCREENSHOT_TIMEOUT:
         raise StableScreenshotFailure()

      time.sleep(STABLE_SCREENSHOT_DELAY)
      curr = vm_take_screenshot()

      if filecmp.cmp(prevs[-1], curr, False):
         break # Bang! We got two identical screenshots.

      # We screenshots differ.
      if len(prevs) > 1:

         # We have more than 1 old screeshot. Could be the cursor blinking?
         if filecmp.cmp(prevs[-2], curr, False):
            break # Assume it's cursor blinking.

      # We have to save this screenshot
      prevs.append(curr)

   # Great, we're out of the loop. Let's delete the useless screenshots.
   for s in prevs:
      os.remove(s)

   return curr

def make_and_save_text_screenshot_base(test_name, n):

   t = screenshot_to_text(vm_take_stable_screenshot())
   raw_print("")
   raw_print(t)
   send_to_qemu_monitor("\n")

   fname = "{}-{}.gz".format(test_name, n)

   with gzip.open(fname, "w") as fh:
      fh.write(t.encode('utf-8'))

def check_screenshot_base(test_name, n):

   t = screenshot_to_text(vm_take_stable_screenshot())
   fname = "{}-{}.gz".format(test_name, n)
   p = os.path.join(INTERACTIVE_EXP, fname)

   with gzip.open(p, "r") as fh:
      exp_t = fh.read().decode('utf-8')

   if t != exp_t:
      IntTestScreenTextCheckFailure(t)

def do_interactive_actions(test_name, inputs):

   counter = 0

   def save_screenshot():
      nonlocal counter
      make_and_save_text_screenshot_base(test_name, counter)
      counter += 1

   def check_screenshot():
      nonlocal counter
      check_screenshot_base(test_name, counter)
      counter += 1

   action_func = save_screenshot if GEN_TEST_DATA else check_screenshot

   for x in inputs:

      raw_print("\n")
      msg_print("Sending to VM: {}".format(x))
      send_to_qemu_monitor("\n")

      send_string_to_vm(x)
      action_func()

def run_handle_boot():

   # Wait for the bootloader to load everything
   time.sleep(3)

   # Take a stable screenshot -> the bootloader has done
   vm_take_stable_screenshot()

   # Now choose the 640x480 mode
   send_string_to_vm("1")

   # Wait a little for Tilck to boot
   time.sleep(1)

   # Take a screenshot for Tilck's initial screen
   s = vm_take_stable_screenshot()

   # Convert (using our pnm2text tool) the image to text
   text = screenshot_to_text(s)

   # Dump on our text
   raw_stdout_write("\n")
   raw_stdout_write(text)
   send_to_qemu_monitor("\n")

   if text.find("Hello from Tilck") == -1:
      raise NoTilckHelloMessage()

   if text.find("KERNEL PANIC") != -1:
      raise KernelPanicFailure()

def run_main_body(test_func):

   try:

      # Boot Tilck and make sure everything is alright
      run_handle_boot()

      # Call the test func
      test_func()

   except StableScreenshotFailure as e:
      msg_print("Exception: " + str(e))
      set_once_fail_reason(Fail.timeout)

   except (NoTilckHelloMessage,
           KernelPanicFailure,
           IntTestScreenTextCheckFailure) as e:

      msg_print("Exception: " + str(e))

      if e.screen_text:
         raw_stdout_write("\n")
         raw_stdout_write(e.screen_text)

      if type(e) is NoTilckHelloMessage:
         set_once_fail_reason(Fail.no_hello_message)
      elif type(e) is KernelPanicFailure:
         set_once_fail_reason(Fail.panic)
      else:
         set_once_fail_reason(Fail.other)

   except Exception as e:
      msg_print("Exception: {}\n{}".format(str(e), traceback.format_exc()))
      set_once_fail_reason(Fail.other)

   except:
      msg_print("Unknown exception:\n" + traceback.format_exc())
      set_once_fail_reason(Fail.other)


def run(test_func):

   args = [
      'qemu-system-i386',
      '-m', str(VM_MEMORY_SIZE_IN_MB),
      '-display', 'none',
      '-monitor', 'stdio',
      '-device', 'isa-debug-exit,iobase=0xf4,iosize=0x04',
      '-drive', 'id=img1,format=raw,if=none,file=' + TILCK_IMAGE,
      '-device', 'ide-hd,drive=img1,cyls=74,heads=16,secs=63'
   ]

   if is_kvm_installed():
      args += ['-enable-kvm', '-cpu', 'host']

   # Run the QEMU process
   p = subprocess.Popen(
      args,
      stdin=subprocess.PIPE,
      stdout=subprocess.PIPE,
      stderr=subprocess.STDOUT
   )
   set_once_qemu_process(p)

   # Make the `stdout` file descriptor non-blocking
   fh_set_blocking_mode(g_process.stdout, False)

   raw_print('-' * 80)
   start_time = time.time()
   echo_qemu_monitor()

   run_main_body(test_func)

   send_to_qemu_monitor("quit")
   wait_for_qemu_to_exit()

   elapsed = time.time() - start_time
   raw_print('-' * 80)
   msg_print("Elapsed: {:.2f} s".format(elapsed))


def setup_tmp_dir():

   if not os.path.isdir(TMP_DIR):
      os.mkdir(TMP_DIR)

   os.chdir(TMP_DIR)
   delete_old_screenshots()

def check_tool_works(tool, help_opt, keyword):

   found = False
   exTrace = None

   try:

      res = subprocess.run([tool, help_opt], stdout=subprocess.PIPE)
      out = res.stdout.decode("utf-8")
      if out.find(keyword) != -1:
         found = True

   except Exception:
      exTrace = traceback.format_exc()

   return found, exTrace

# NOTE: unused function
def check_imagemagick_installed():

   found, exTrace = check_tool_works("convert", "-h", "ImageMagick")

   if not found:
      msg_print("ERROR: ImageMagick (convert tool) not found on the system")
      msg_print("Exception:\n{}".format(exTrace))
      sys.exit(Fail.invalid_system_config)

def check_system_config():

   # Do nothing, at the moment: since img_covert() is used nowhere, we do not
   # need to check for the presence of ImageMagick on the system.
   pass

   # check_imagemagick_installed()

def check_pnm2text():

   found, exTrace = check_tool_works(PNM2TEXT, "-h", "pnm2text")

   if not found:
      msg_print("ERROR: pnm2text not found in the build directory")
      msg_print("ERROR: you might need to run `make`")
      msg_print("Exception:\n{}".format(exTrace))
      sys.exit(Fail.invalid_build_config)

def load_tests():

   global g_tests

   for f in os.listdir(INTERACTIVE_TESTS):

      if not f.endswith(".py"):
         continue

      name = os.path.splitext(f)[0]
      p = os.path.join(INTERACTIVE_TESTS, f)

      with open(p, 'r') as fh:
         src = fh.read()

      e = compile(src, p, 'exec')
      g_tests[name] = e

def compute_matching_tests_list():

   if not g_filter_regex:
      return g_tests

   re_filter = re.compile(g_filter_regex)
   return list(filter(lambda x: re_filter.match(x), g_tests))

def dump_list_matching_tests_and_timeout():

   ll = compute_matching_tests_list()

   if not ll:
      msg_print("ERROR: no tests matching '{}'".format(g_filter_regex))
      sys.exit(Fail.invalid_args.value)

   msg_print("Per-test timeout: {}s".format(g_timeout))

   if ll != g_tests:
      msg_print("Matching tests: " + " ".join(ll))
   else:
      msg_print("Matching tests: ALL ({})".format(" ".join(ll)))

   raw_print("")

def run_all_tests():

   matching_list = compute_matching_tests_list()
   raw_stdout_write("\n")
   msg_print("Run all tests")
   msg_print("-" * 50)

   for k in matching_list:
      delete_old_screenshots()
      msg_print("Interactive test: {}".format(k))
      send_to_qemu_monitor("\n")
      exec(g_tests[k], globals(), {})
      raw_stdout_write("\n\n")

def show_help():
   raw_print("Syntax: ")
   raw_print("  run_interactive_test <testname_regex> [<timeout>]")
   raw_print("  run_interactive_test -h, --help")
   raw_print("  run_interactive_test -a, --all")
   raw_print("  run_interactive_test -l, --list")

def show_help_and_exit():
   show_help()
   sys.exit(Fail.invalid_args.value)

def dump_list_of_tests():

   for k in g_tests:
      raw_print(k)

   sys.exit(0)

def parse_args():

   global g_before_run_func
   global g_filter_regex
   global g_timeout

   if sys.argv[1] in ["-h", "--help"]:
      show_help()
      sys.exit(0)

   if sys.argv[1] in ["-l", "--list"]:
      g_before_run_func = dump_list_of_tests
      return

   if sys.argv[1] in ["-a", "--all"]:
      # Do nothing: keep g_filter_regex set to None
      return

   # Assume argv[1] is the test name filter regex
   g_filter_regex = sys.argv[1]

   if len(sys.argv) >= 3:
      g_timeout = int(sys.argv[2])

def main():

   set_runner_name("interactive tests runner")

   if len(sys.argv) < 2:
      show_help_and_exit()

   parse_args()
   check_cmake_config()
   check_system_config()
   check_pnm2text()
   setup_tmp_dir()
   load_tests()
   g_before_run_func()

   dump_list_matching_tests_and_timeout()
   detect_kvm()

   thread = threading.Thread(target = run, args = (run_all_tests,))
   thread.start()
   thread.join(g_timeout)

   if thread.is_alive():

      # If we get here, after `g_params.timeout`, the test is still running

      if g_dumping_gcda_files:

         # If we're just dumping the GCDA file, wait a little more
         thread.join(30)

      if thread.is_alive():
         # We have to fail with timeout
         set_once_fail_reason(Fail.timeout)
         print_timeout_kill_vm_msg(g_timeout)
         g_process.send_signal(signal.SIGINT)
         thread.join()

   sys.exit(g_fail_reason.value)

###############################
if __name__ == '__main__':
   main()
