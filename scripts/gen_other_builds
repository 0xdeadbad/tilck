#!/bin/bash
# SPDX-License-Identifier: BSD-2-Clause

# GLOBAL VARIABLES

# Project's root directory
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MAIN_DIR="$(cd $SOURCE_DIR/.. && pwd)"

# Include files
source $MAIN_DIR/scripts/bash_includes/script_utils

# CONSTANTS

CM=$MAIN_DIR/scripts/cmake_run

builds=(gcc gcc_rel gcc_gcov nocow no_nested_irq_tracking syscc clang_wconv)
builds+=(arch_gtests tc_isystem_with_syscc_clang)

#############################################
# FUNCTIONS

function do_build_gcc {
   $CM
}

function do_build_gcc_rel {
   RELEASE=1 $CM
}

function do_build_gcc_gcov {
   TEST_GCOV=1 KERNEL_GCOV=1 $CM
}

function do_build_nocow {
   $CM -DFORK_NO_COW=1 -DMMAP_NO_COW=1
}

function do_build_no_nested_irq_tracking {
   $CM -DKERNEL_TRACK_NESTED_INTERRUPTS=0
}

function do_build_syscc {
   SYSCC=1 $CM
}

function do_build_clang_wconv {
   CC=clang CXX=clang++ $CM -DKERNEL_SYSCC=1 -DWCONV=1
}

function do_build_arch_gtests {
   $CM -DARCH_GTESTS=1
}

function do_build_tc_isystem_with_syscc_clang {
   CC=clang $CM -DKERNEL_SYSCC=1 -DKERNEL_FORCE_TC_ISYSTEM=1
}

function show_help {

   echo ""
   echo "This script will create the directory other_builds and build Tilck and "
   echo "its tests in a variety of configurations, some of them not particularly"
   echo "common. In order to all the builds to succeed, additional packages are"
   echo "expected to be installed in the host system, other than the ones"
   echo "installed by 'build_toolchain'. In particular: "
   echo ""
   echo "   - gcc-multilib (debian pkg name) [gcc able to build i386 binaries]"
   echo ""
   echo "   - clang and clang++"
   echo ""
   echo "   - build_toolchain needs to be run 3 times in order to build "
   echo "     optional components:"
   echo ""
   echo "         1. without arguments to build & install the default stuff"
   echo "         2. with -s build_gtest"
   echo "         3. with -s build_gtest_arch"
   echo ""
   echo "List of the build configurations that will be generated and built:"

   for x in ${builds[@]}; do
      echo "   - $x"
   done

   echo ""
   echo "WARNING: if you're new to Tilck, that's probably NOT the script "
   echo "you're looking for. You probably just want to do a debug build, run"
   echo "the tests and Tilck itself in a VM. To do that, just go to project's"
   echo "main directory and run './scripts/build_toolchain'. Then, you can run"
   echo "'make' and finally './build/run_qemu' or './build/run_nokvm_qemu'."
   echo "Check out the main README.md file for more."
   echo ""
}

function ask_confirm {

   show_help
   echo -n "Proceed [y/N] ? "
   read answer

   if [[ "$answer" != "y" ]]; then
      exit 0
   fi
}

#############################################
# MAIN CODE

# Exit on any error
set -e

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
   show_help
   exit 0
fi

if [[ "$1" != "-y" ]]; then
   ask_confirm
fi

mkdir -p $MAIN_DIR/other_builds
cd $MAIN_DIR/other_builds

for x in ${builds[@]}; do
   echo "************ Build: $x ************"
   mkdir -p $x
   pushd $x
   eval do_build_$x
   make -j
   make -j gtests
   popd
done

