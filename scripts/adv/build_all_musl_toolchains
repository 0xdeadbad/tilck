#!/bin/bash
# SPDX-License-Identifier: BSD-2-Clause

SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MAIN_DIR="$(cd "$SOURCE_DIR/../.." && pwd)"
NAME="$(basename "$0")"

if [[ "$1" == "" || "$1" == "-h" || "$1" == "--help" ]]; then
   echo "Syntax: "
   echo "   $NAME [-t <tc>] <par> <bundles> <configs> <musl-cross-make>"
   echo "   $NAME --build-tc <dest dir> <par> <musl-cross-make source>"
   echo
   echo "   <par>                  Level of parallelism. E.g. make -j $par"
   echo "   <bundles>              Bundles destination directory"
   echo "   <configs>              Directory with all the config.mak files"
   echo "   <musl-cross-make>      Clone of the musl-cross-make repo"
   echo "   <tc>                   Musl toolchain dir to use for building the "
   echo "                          toolchains."
   exit 1
fi

arch="$(uname -m)"

if [[ "$arch" == "x86_64" ]]; then

   # We might be running inside a i386 container on a x86_64 host.
   # Let's check for that.

   if [[ "$(getconf LONG_BIT)" == "32" ]]; then
      echo "INFO: DETECTED 32-bit userspace environment on x86_64"
      echo "INFO: Setting arch=i686"
      arch="i686"
   fi
fi


if [[ "$1" == "--build-tc" ]]; then

   dest="$2"
   par="$3"
   musl="$4"

   if ! [[ -d "$musl" ]]; then
      echo "ERROR: '$musl' is not a directory"
      exit 1
   fi

   if [[ -e "$dest" ]]; then
      echo "ERROR: destination '$dest' exists"
      exit 1
   fi

   dest="$(realpath "$dest")"

   pushd "$musl" &> /dev/null
   echo "TARGET = $arch-linux-musl" > "config.mak"

   cat <<EOF >> "config.mak"

BINUTILS_VER = 2.44
GCC_VER = 13.3.0
MUSL_VER = git-v1.2.5

COMMON_CONFIG += CFLAGS="-g0 -O2" CXXFLAGS="-g0 -O2" LDFLAGS="-s -static"

GCC_CONFIG += --disable-shared
GCC_CONFIG += --enable-static
GCC_CONFIG += --with-static-standard-libraries

MUSL_CONFIG += --disable-shared
MUSL_CONFIG += --enable-debug
EOF

   set -e
   echo "Build with make -j $par"
   time make -j $par &> "build.log"

   echo "Install"
   time make install &> "install.log"

   if ! [[ -d "output" ]]; then
      echo "ERROR: build or install failed. Cannot find the output dir"
      exit 1
   fi

   echo "INFO: move the output dir to the destination: $dest"
   mv output "$dest"


   echo "DONE."
   echo "[ Now this new toolchain can be used with -t to build the others. ]"
   popd &> /dev/null
   exit 0
fi

if [[ "$1" == "-t" ]]; then

   shift # Drop -t from the args

   if ! [[ -d "$1" ]]; then
      echo "ERROR: '$1' is not valid directory"
      exit 1
   fi

   if ! [[ -d "$1/bin" ]]; then
      echo "ERROR: '$1/bin' is not valid directory"
      exit 1
   fi

   tc="$(realpath "$1/bin")"
   shift # Drop the tc param from the args

   if [[ -f "$tc/$arch-linux-musl-gcc" ]]; then
      export CC="$arch-linux-musl-gcc"
   elif [[ -f "$tc/arch-linux-gcc" ]]; then
      export CC="$arch-linux-gcc"
   else
      echo "ERROR: cannot find the GCC binary in $tc"
      exit 1
   fi

   if [[ -f "$tc/$arch-linux-musl-g++" ]]; then
      export CXX="$arch-linux-musl-g++"
   elif [[ -f "$tc/arch-linux-g++" ]]; then
      export CXX="$arch-linux-g++"
   else
      echo "ERROR: cannot find the G++ binary in $tc"
      exit 1
   fi

   # Prepend our custom toolchain to the PATH
   export PATH="$tc:$PATH"
fi

par="$1"
bundles="$(realpath "$2")"
configs="$(realpath "$3")"
musl="$(realpath "$4")"
package="$MAIN_DIR/scripts/dev/package-gcc-tc"

if ! [[ "$par" =~ ^-?[0-9]+$ ]]; then
   echo "'$par' is not a valid integer"
   exit 1
fi
if [[ "$par" -le 0 ]]; then
   echo "<par> must be a positive integer. Got $par"
   exit 1
fi
if ! [ -d "$bundles" ]; then
   echo "The bundles directory does not exist"
   exit 1
fi
if ! [ -d "$configs" ]; then
   echo "The configs directory does not exist"
   exit 1
fi
if ! [ -d "$musl" ]; then
   echo "The musl-cross-make directory does not exist"
   exit 1
fi
if ! [ -f "$musl/config.mak.dist" ]; then
   echo "File $musl/config.mak.dist NOT found. Wrong musl-cross-make dir?"
   exit 1
fi
if ! [ -f "$package" ]; then
   echo "ERROR: package-gcc-tc script not found"
   exit 1
fi

if [[ "$CC" == "" && "$CXX" == "" ]]; then

   export CC="gcc"
   export CXX="g++"

   echo "INFO: $CC and $CXX not set. Assuming CC='gcc', CXX='g++'."

elif [[ "$CC" != "" && "$CXX" != "" ]]; then

   echo "INFO: CC='$CC', CXX='$CXX'"

else

   echo "ERROR: CC and CXX are not both set or both unset"
   echo "ERROR: CC='$CC', CXX='$CXX'"
   exit 1

fi

echo
echo "Check if the given CC and CXX compilers produce by default statically"
echo "linked binaries. If they don't, the compiled toolchains won't be "
echo "portable."
echo

mkdir -p /tmp/build-toolchains-tests
pushd /tmp/build-toolchains-tests &> /dev/null
rm -rf *

cat <<EOF > hello1.c
#include <stdio.h>
int main() { printf("hello\n"); }
EOF

cat <<EOF > hello2.cpp
#include <iostream>
int main() { std::cout << "hello\n"; }
EOF

echo -n "Check CC: "
$CC hello1.c -o hello1
if ldd ./hello1 2>&1 | grep "not a dynamic executable" &> /dev/null; then
   echo "[ OK ]"
else
   echo "[FAIL]"
   exit 1
fi

echo -n "Check CXX: "
$CXX hello2.cpp -o hello2
if ldd ./hello2 2>&1 | grep "not a dynamic executable" &> /dev/null; then
   echo "[ OK ]"
else
   echo "[FAIL]"
   exit 1
fi

echo
echo

popd &> /dev/null
rm -rf /tmp/build-toolchains-tests

set -e
pushd "$configs" &> /dev/null
i=1
count=$(ls | wc -l)

for x in *; do

   echo "Config: $x [$i/$count]"
   echo "--------------------------------------------------------------------"
   cat "$x";
   echo "--------------------------------------------------------------------"

   echo "Copy config file into $musl"
   cp "$x" "$musl/config.mak"

   pushd "$musl" &> /dev/null

   echo "Clean"
   make clean &> /dev/null
   rm -f build.log
   rm -f install.log
   rm -rf output

   echo "Build with make -j $par"
   time make -j $par &> build.log

   echo "Install"
   time make install &> install.log

   echo "Package the toolchain bundle"
   $package -d "$bundles" "$(realpath ./output)"

   echo "Done."
   echo "--------------------------------------------------------------------"
   popd &> /dev/null
   echo
   echo
   echo

   i=$((i+1))
done
popd &> /dev/null

