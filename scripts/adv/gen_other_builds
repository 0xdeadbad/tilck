#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# GLOBAL VARIABLES

# Project's root directory
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MAIN_DIR="$(cd $SOURCE_DIR/../.. && pwd)"

# Include files
source $MAIN_DIR/scripts/bash_includes/script_utils

# CONSTANTS

CM=$MAIN_DIR/scripts/cmake_run

builds=(gcc gcc_rel gcc_gcov nocow no_nested_irq_tracking syscc clang_wconv)
builds+=(arch_gtests tc_isystem_with_syscc_clang gcc_fast_rel)

#############################################
# FUNCTIONS

function do_build_gcc {
   $CM
}

function do_build_gcc_rel {
   RELEASE=1 $CM
}

function do_build_gcc_gcov {
   TEST_GCOV=1 KERNEL_GCOV=1 $CM
}

function do_build_nocow {
   $CM -DFORK_NO_COW=1 -DMMAP_NO_COW=1
}

function do_build_no_nested_irq_tracking {
   $CM -DKERNEL_TRACK_NESTED_INTERRUPTS=0
}

function do_build_syscc {
   USE_SYSCC=1 $CM
}

function do_build_clang_wconv {
   CC=clang CXX=clang++ $CM -DKERNEL_SYSCC=1 -DWCONV=1
}

function do_build_arch_gtests {
   $CM -DARCH_GTESTS=1
}

function do_build_tc_isystem_with_syscc_clang {
   CC=clang $CM -DKERNEL_SYSCC=1 -DKERNEL_FORCE_TC_ISYSTEM=1
}

function do_build_gcc_fast_rel {
   RELEASE=1 $CM                              \
      -DKERNEL_TRACK_NESTED_INTERRUPTS=0      \
      -DDEBUG_CHECKS_IN_RELEASE_BUILD=0       \
      -DKERNEL_STACK_ISOLATION=0
}

function show_help {

   echo ""
   echo "This script will create the directory other_builds and build Tilck and"
   echo "its tests in a variety of configurations, some of which them are not"
   echo "very common. In order to all the builds to succeed, additional "
   echo "packages are expected to be installed in the host system, other than"
   echo -ne "the ones installed by the ${GREEN}build_toolchain${RATTRS} script."
   echo -ne " In addition, the\n"
   echo "script needs to be run multiple times in order to download & build "
   echo "optional components. In particular:"
   echo ""
   echo "   - gcc-multilib (debian package name)"
   echo "         [A version of gcc able to build i386 binaries on x86_64]"
   echo "         [Use your package manager to install on your system]"
   echo ""
   echo "   - clang and clang++"
   echo "         [Use your package manager to install on your system]"
   echo ""
   echo "   - toolchain/build_gtest"
   echo "         [Get with: build_toolchain -s build_gtest]"
   echo ""
   echo "   - toolchain/build_gtest_arch"
   echo "         [Get with: build_toolchain -s build_gtest_arch]"
   echo ""
   echo "   - toolchain/lcov"
   echo "         [Get with: build_toolchain -s build_lcov]"
   echo ""
   echo "   - toolchain/musl"
   echo "         [Get with: build_toolchain -s build_libmusl]"
   echo ""
   echo "Build configurations that will be generated and built:"

   for x in ${builds[@]}; do
      echo "   - $x"
   done

   echo ""
   echo -ne "${RED}WARNING${RATTRS}: if you're new to Tilck, that's probably "
   echo -ne "${RED}not${RATTRS} the script you're looking\nfor. "
   echo -ne "${BROWN}Check out${RATTRS} the main README.md file for info about "
   echo -ne "how to build Tilck and\nrun its tests.\n"
   echo ""
}

function ask_confirm {

   show_help
   echo -n "Proceed [y/N] ? "
   read answer

   if [[ "$answer" != "y" ]]; then
      exit 0
   fi
}

#############################################
# MAIN CODE

# Exit on any error
set -e

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
   show_help
   exit 0
fi

if [[ "$1" != "-y" ]]; then
   ask_confirm
fi

mkdir -p $MAIN_DIR/other_builds
cd $MAIN_DIR/other_builds

for x in ${builds[@]}; do
   echo "************ Build: $x ************"
   mkdir -p $x
   pushd $x
   eval do_build_$x
   make -j
   make -j gtests
   popd
done

