#!/bin/bash
# SPDX-License-Identifier: BSD-2-Clause

VERSION_REGEX='[0-9]+[.][0-9]+[.][0-9]+'

# $1 version in the format "major.minor.patchlevel"
# $2 component number to get (1 => major, 2 => minor, 3 => patchlevel)
function get_version_comp {
   echo -ne $1 | grep -Eo '[0-9]+' | head -$2 | tail -1
}

# $1 = program name
function generic_get_version_str {
   $1 --version | head -1 | grep -Eo "$VERSION_REGEX" | head -1
}

# $1 = command
function run_command {
   echo "Running command: $1"
   $1
}

# $1 = command
# $2 = output file
function run_command2 {
   echo "Running command: $1 &> $2"
   $1 &> $2
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

function show_work_on_component_msg {
   echo
   echo "*** $1 ***"
   echo
}

function show_skip_component_msg {
   echo "NOTE: Skipping $1"
}

# $1 = program name
# $2 = min version string
function show_too_old_and_exit {
   echo "System's $1 is too old. Version >= $2 is required."
   exit 1
}

# $1 = program name
# $2 = current version string (i.e. "1.2.3")
# $3 = min version string (i.e. "1.2.3")
function fail_if_too_old {

   major=$(get_version_comp $2 1)
   minor=$(get_version_comp $2 2)
   echo "[cmake_run] $1 version (parsed): $major.$minor"

   min_major=$(get_version_comp $3 1)
   min_minor=$(get_version_comp $3 2)

   if [ $major -lt $min_major ]; then
      show_too_old_and_exit $1 $3
   elif [ $major -eq $min_major ] && [ $minor -lt $min_minor ]; then
      show_too_old_and_exit $1 $3
   fi
}


function determine_gcov_tool {

   if [[ "$ARCH_GTESTS" == "" || "$ARCH_GCOV" == "" || "$CC" == "" ]]; then
      echo "ERROR: ARCH_GTESTS and ARCH_GCOV and CC must be set"
      exit 1
   fi

   # If we're using arch gtests, we have to use gcov from our toolchain
   if [[ "$ARCH_GTESTS" == "ON" || "$ARCH_GTESTS" == "1" ]]; then
      GCOV="$ARCH_GCOV"
      return
   fi

   # If we're using kernel gcov, we have to use gcov from our toolchain
   if [[ "$KERNEL_GCOV" == "ON" || "$KERNEL_GCOV" == "1" ]]; then
      GCOV="$ARCH_GCOV"
      return
   fi

   if [[ "$GCOV" != "" ]]; then
      # A $GCOV variable has been set globally by the user, just use it.
      return
   fi

   # We have to try to find 'gcov' from the same toolchain the
   # compiler is part of, in order to avoid compatibility issues.

   if [[ "$SYS_CC" != "" ]]; then

      local gcc_path="`which $SYS_CC`"
      local gcc_dir=$(dirname "$gcc_path")
      GCOV="$gcc_dir/gcov"

      if which "$GCOV" &> /dev/null; then
         return # We've found it.
      fi
   fi

   if [[ "$CC" != "" ]]; then

      local gcc_path="`which $CC`"
      local gcc_dir=$(dirname "$gcc_path")
      GCOV="$gcc_dir/gcov"

      if which "$GCOV" &> /dev/null; then
         return # We've found it.
      fi
   fi

   GCOV="gcov"
   if which "$GCOV" &> /dev/null; then
      return # Just use system's gcov
   fi

   echo "ERROR: unable to find GCOV on the system"
   exit 1
}
