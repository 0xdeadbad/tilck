#!/usr/bin/python
# SPDX-License-Identifier: BSD-2-Clause

import os
import sys
import subprocess

# Constants

fileTypes = [
   "C (source)",
   "C/C++ (header)",
   "C++ (source)",
   "Assembly",
   "Python",
   "CMake",
   "Shell script"
]

extToType = {
   ".c": "C (source)",
   ".h": "C/C++ (header)",
   ".cpp": "C++ (source)",
   ".cc": "C++ (source)",
   ".cxx": "C++ (source)",
   ".py": "Python",
   ".asm": "Assembly",
   ".S": "Assembly",
   ".cmake": "CMake",
   ".sh": "Shell script"
}

excludedDirs = [
   "docs",
   "build",
   "sysroot",
   "toolchain",
   "system_headers",
   ".git",
   ".vscode"
]

PREFIX = " " * 3
FLEN = [ 15, 8, 8, 8 ] # fields length

#########################################
# Global variables

optPrintFileNames = False
#########################################

def GetNoExtFileType(fpath):

   out = subprocess.check_output(['file', fpath])

   if out.find("shell script") != -1:
      return "Shell script"

   if out.find("Python script") != -1:
      return "Python"

   return None

def GetFileType(f, folder):

   if f == "CMakeLists.txt":
      return "CMake"

   fname, fext = os.path.splitext(f)

   if fext == "":
      return GetNoExtFileType(os.path.join(folder, f))

   if not fext in extToType:
      return None

   return extToType[fext]


def CountLinesInFile(f, ft):

   res = [0, 0]  # tot lines, empty lines

   if optPrintFileNames:
      print("file: {0}   -> {1}".format(f, ft))

   with open(f, 'r') as fd:

      for line in fd:

         res[0] += 1

         if not line.strip():
            res[1] += 1

   return res

def IsExcluded(path):

   for e in excludedDirs:
      if path.find(e) != -1:
         return True

   return False

def AccumulateCounters(destArr, arr):

   for ft in fileTypes:
      destArr[ft] += arr[ft]

def PrintRow(cols):

   s = PREFIX

   for i, val in enumerate(cols):

      if i == 0:
         s += str(val).ljust(FLEN[i]) + " "
      else:
         s += str(val).rjust(FLEN[i]) + " "

   print(s)

def GetEmptyPercStr(t, e):
   return str(round(100.0 * e/t, 1)) + "%"

def PrintCounters(arr, eArr, total, eTot):

   PrintRow(["File type", "Tot", "Empty", "Empty%"])

   for ft in fileTypes:

      vals = [ arr[ft], eArr[ft] ]

      if vals[0] > 0:
         PrintRow([ft] + vals + [GetEmptyPercStr(vals[0], vals[1])])

   print("-" * 50)
   PrintRow(["Total:", total, eTot, GetEmptyPercStr(total, eTot)])

def main():

   global optPrintFileNames

   if len(sys.argv) > 1 and sys.argv[1] == '-v':
      optPrintFileNames = True
      del sys.argv[1]

   if len(sys.argv) > 1:
      destDirs = sys.argv[1:]
   else:
      destDirs = ["."]

   gLinesCount = {ft: 0 for ft in fileTypes}
   gEmptyLinesCount = {ft: 0 for ft in fileTypes}

   gTotal = 0
   gEmptyTotal = 0

   print("") # print an empty line

   for destDir in destDirs:

      if not os.path.isdir(destDir) or IsExcluded(destDir):
         continue

      linesByType = {t: 0 for t in fileTypes}
      emptyLinesByType = {t: 0 for t in fileTypes}
      total = 0
      emptyTotal = 0

      for folder, subfolders, files in os.walk(destDir):

         if not IsExcluded(folder):

            for f in files:

               ft = GetFileType(f, folder)

               if ft is not None:

                  c = CountLinesInFile(os.path.join(folder, f), ft)

                  linesByType[ft] += c[0]
                  emptyLinesByType[ft] += c[1]
                  total += c[0]
                  emptyTotal += c[1]
                  gTotal += c[0]
                  gEmptyTotal += c[1]


      print ("Number of lines in '{0}':".format(destDir))
      AccumulateCounters(gLinesCount, linesByType)
      AccumulateCounters(gEmptyLinesCount, emptyLinesByType)
      PrintCounters(linesByType, emptyLinesByType, total, emptyTotal)

   if len(destDirs) > 1:
      print("\nCumulative number of lines:")
      PrintCounters(gLinesCount, gEmptyLinesCount, gTotal, gEmptyTotal)

#########################################################
if __name__ == "__main__":
   main()
