#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# Exit on any error
set -e

maindir="@CMAKE_SOURCE_DIR@"
bdir="@CMAKE_BINARY_DIR@"
dest="@CMAKE_BINARY_DIR@/fatpart"
tc="@TCROOT@"

mtoolsdir=$tc/mtools
mformat=$mtoolsdir/mformat
mlabel=$mtoolsdir/mlabel
mmd=$mtoolsdir/mmd
mcopy=$mtoolsdir/mcopy

function pushd {
   command pushd "$@" > /dev/null
}

function popd {
   command popd "$@" > /dev/null
}

function create_fatpart_if_necessary {
   if [ ! -f $dest ]; then
      # If the 'fatpart' file does not already exist
      dd status=none if=/dev/zero of=$dest bs=1M count=35
   fi
}

function format_fatpart {
   # mformat options
   # -d <N> ; num of FAT copies
   # -F     ; force FAT32 to be used
   # -c <N> ; sectors per cluster
   # -t <N> ; cylinders
   # -h <N> ; heads
   # -s <N> ; sectors
   $mformat -i $dest -d 1 -F -c 1 -t 70 -h 16 -s 63 ::
   $mlabel -i $dest ::TILCK
}

function create_sysroot_skeleton {
   rm -rf $bdir/sysroot
   cp -r $maindir/sysroot $bdir/
   cd $bdir/sysroot

   # Remove the README file that is not supposed to be in the actual sysroot
   rm README
}

function add_apps {

   IFS=";"

   ln $bdir/userapps/init sbin/

   apps="@USERAPPS_FILES_LIST@"
   extra_apps="@EXTRA_APPS_LIST@"

   for x in ${apps[@]}; do
      ln "$x" bin/
   done

   pushd bin
   rm init     # We already put `init` in `/bin`.
   popd

   for x in ${extra_apps[@]}; do
      ln "$x" usr/bin/
   done

   unset IFS
}

function add_efi_files {

   # hard-link EFI files

   if [ -s "@EFI_x86_64_FILE@" ]; then
      ln "@EFI_x86_64_FILE@" EFI/BOOT/
   fi

   if [ -s "@EFI_ia32_FILE@" ]; then
      ln "@EFI_ia32_FILE@" EFI/BOOT/
   fi
}

function add_tilck_kernel {
   # hard-link the kernel file (used also by the legacy bootloader)
   ln @KERNEL_FILE@ @KERNEL_FATPART_PATH@
}

function add_busybox {
   if [ -d $tc/busybox ]; then
      ln $tc/busybox/busybox bin/
   fi
}

function add_fat_test_dir {

   if [[ "@FAT_TEST_DIR@" == "0"   ||
         "@FAT_TEST_DIR@" == "off" ||
         "@FAT_TEST_DIR@" == "OFF" ||
         "@FAT_TEST_DIR@" == "false" ]]
   then
      return
   fi

   mkdir -p tdir
   pushd tdir
      for i in {0..99}; do
         if [ $i -lt 10 ]; then
            n="0"
         else
            n=""
         fi
         echo > test_$n$i
      done
   popd
}

function make_fatpart {

   create_fatpart_if_necessary
   format_fatpart

   # first, create the directories
   for f in $(find * -type d); do
      $mmd -i $dest $f
   done

   # then, copy all the files in sysroot
   for f in $(find * -type f); do
      $mcopy -i $dest $f ::/$f
   done
}

# -----------------------------------------------------------------------------
# MAIN
# -----------------------------------------------------------------------------

create_sysroot_skeleton

add_apps
add_efi_files
add_tilck_kernel
add_fat_test_dir
add_busybox

make_fatpart
