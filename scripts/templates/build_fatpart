#!/bin/bash
# SPDX-License-Identifier: BSD-2-Clause

# Exit on any error
set -e

maindir="@CMAKE_SOURCE_DIR@"
bdir="@CMAKE_BINARY_DIR@"
dest="@CMAKE_BINARY_DIR@/fatpart"
tc="@TCROOT@"

mtoolsdir=$tc/mtools
mformat=$mtoolsdir/mformat
mlabel=$mtoolsdir/mlabel
mmd=$mtoolsdir/mmd
mcopy=$mtoolsdir/mcopy

if [ ! -f $dest ]; then
   # If the 'fatpart' file does not already exist
   dd status=none if=/dev/zero of=$dest bs=1M count=35
fi

# mformat options
# -d <N> ; num of FAT copies
# -F     ; force FAT32 to be used
# -c <N> ; sectors per cluster
# -t <N> ; cylinders
# -h <N> ; heads
# -s <N> ; sectors
$mformat -i $dest -d 1 -F -c 1 -t 70 -h 16 -s 63 ::
$mlabel -i $dest ::TILCK

rm -rf $bdir/sysroot
cp -r $maindir/sysroot $bdir/

# Remove the README file that is not supposed to be in the actual sysroot
rm $bdir/sysroot/README

cd $bdir/sysroot
ln $bdir/userapps/init sbin/

IFS=";"

apps="@USERAPPS_FILES_LIST@"
extra_apps="@EXTRA_APPS_LIST@"

for x in ${apps[@]}; do
   ln "$x" bin/
done

pushd bin
rm init     # We already put `init` in `/bin`.
popd

for x in ${extra_apps[@]}; do
   ln "$x" usr/bin/
done

unset IFS

# hard-link EFI files

if [ -s "@EFI_x86_64_FILE@" ]; then
   ln "@EFI_x86_64_FILE@" EFI/BOOT/
fi

if [ -s "@EFI_ia32_FILE@" ]; then
   ln "@EFI_ia32_FILE@" EFI/BOOT/
fi

# hard-link the kernel file (used also by the legacy bootloader)
ln @KERNEL_FILE@ @KERNEL_FATPART_PATH@

if [ -d $tc/busybox ]; then
   ln $tc/busybox/busybox bin/
fi

# first, create the directories
for f in $(find * -type d); do
   $mmd -i $dest $f
done

# then, copy all the files in sysroot
for f in $(find * -type f); do
   $mcopy -i $dest $f ::/$f
done

