#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# GLOBAL VARIABLES

# Project's root directory
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MAIN_DIR="$(cd $SOURCE_DIR/.. && pwd)"

# Constants
BUILD_ARCH="x86_64" # the only arch accepted for the build machine
X86_TOOLCHAIN_DIR_NAME="x86_gcc_toolchain"

# Arch-variables

HOST_ARCH="`uname -m`"

if [[ "$HOST_ARCH" == "i686" ]]; then

   # We need to set HOST_ARCH to "i368", using the same convention
   # used by ARCH and ld.

   HOST_ARCH="i386"
fi

# ARCH and ARCH_* variables are all about the TARGET architecture

if [[ "$ARCH" == "" ]]; then
   export ARCH="i386" # default target arch
fi

if [[ "$ARCH" == "i386" ]]; then

   ARCH_SHORT="x86"
   ARCH_FAMILY="generic_x86"
   ARCH_ELF_NAME="elf32-i386"
   ARCH_LD_OUTPUT="elf_i386"
   ARCH_EFI="ia32"
   ARCH_GCC_TC="i686"
   ARCH_GCC_FLAGS="-m32 -march=$ARCH_GCC_TC"
   ARCH_TC_DIR="$X86_TOOLCHAIN_DIR_NAME"

else
   echo "Architecture '$ARCH' not supported."
   exit 1
fi

echo
echo "ARCH=$ARCH"
echo

all_funcs_list=()

# Source files to include

source $MAIN_DIR/scripts/bash_includes/script_utils
source $MAIN_DIR/scripts/bash_includes/tc/install_pkgs
source $MAIN_DIR/scripts/bash_includes/tc/gcc_tc
source $MAIN_DIR/scripts/bash_includes/tc/cmake_download

###############################
# Mtools
###############################

all_funcs_list+=(build_mtools)
function build_mtools {

   pushd .

   if ! [ -d mtools ]; then

      show_work_on_component_msg "MTOOLS"
      local pkgname=mtools-4.0.23
      local tarname=$pkgname.tar.gz

      download_file_in_cache "ftp://ftp.gnu.org/gnu/mtools" "$tarname"
      extract_cachefile_tar_gz $tarname $pkgname mtools

      cd mtools
      run_command2 ./configure configure.log
      run_command2 "make -j" build.log
   else
      show_skip_component_msg "MTOOLS"
   fi

   popd
}


###############################
# LCOV (front end for GCOV)
###############################

all_funcs_list+=(build_lcov)
function build_lcov {

   pushd .
   if ! [ -d lcov ]; then

      show_work_on_component_msg "LCOV"

      local url="https://github.com/linux-test-project/lcov.git"
      git clone --branch v1.13 --depth 1 "$url"
      cd lcov
   else
      show_skip_component_msg "LCOV"
   fi
   popd

}

##############################
# Build gtest
##############################

all_funcs_list+=(build_gtest)
function build_gtest {

   pushd .

   if ! [ -d googletest ]; then
      local url="https://github.com/google/googletest.git"
      git clone --branch release-1.8.0 --depth 1 "$url"
   fi

   if ! [ -d gtest ]; then

      show_work_on_component_msg "GOOGLE TEST (host arch)"
      mkdir gtest
      cd gtest

      $CMAKE -DCMAKE_BUILD_TYPE=Debug ../googletest/googletest
      run_command2 "make -j" build.log
   else
      show_skip_component_msg "GOOGLE TEST (host arch)"
   fi

   popd
}

all_funcs_list+=(build_gtest_arch)
function build_gtest_arch {

   pushd .

   if ! [ -d googletest ]; then
      local url="https://github.com/google/googletest.git"
      git clone --branch release-1.8.0 --depth 1 "$url"
   fi

   if ! [ -d gtest_arch ]; then

      show_work_on_component_msg "GOOGLE TEST (target arch)"
      download_gcc_glibc_toolchain

      mkdir gtest_arch
      cd gtest_arch

      local cc="${GCC_TOOLCHAIN_GLIBC}/${ARCH_GCC_TC}-linux-gcc"
      local cxx="${GCC_TOOLCHAIN_GLIBC}/${ARCH_GCC_TC}-linux-g++"
      CC=$cc CXX=$cxx $CMAKE -DCMAKE_BUILD_TYPE=Debug ../googletest/googletest
      run_command2 "make -j" build.log
   else
      show_skip_component_msg "GOOGLE TEST (target arch)"
   fi

   popd
}

##################################
# Build libmusl
##################################

all_funcs_list+=(build_libmusl)
function build_libmusl {

   pushd .
   local saved_path="$PATH"
   export SYS_CC="$CC"
   export SYS_CXX="$CXX"

   if ! [ -d musl ]; then

      if [[ "$USE_SYSCC" == "" || "$USE_SYSCC" == 0 ]]; then

         # The glibc gcc toolchain is necessary in order to build libmusl and
         # make its build system generate the musl-gcc script. Attempting to
         # build libmusl with the musl gcc toolchain succeeds BUT the musl-gcc
         # script and the lib/musl-gcc.specs file ARE NOT generated, because the
         # build system detected that the toolchain is already using libmusl. In
         # our case having the ability to build libmusl and compile programs
         # with musl-gcc is essential since it allows debugging libmusl itself
         # (the pre-compiled toolchain uses an optimized non-debug version of
         # libmusl).

         download_gcc_glibc_toolchain
         export PATH="$GCC_TOOLCHAIN_GLIBC:$PATH"

      else

         export CC="$MAIN_DIR/scripts/build_scripts/${ARCH}-gcc"
         export CXX="$MAIN_DIR/scripts/build_scripts/${ARCH}-g++"

      fi

      show_work_on_component_msg "LIBMUSL"

      git clone --branch v1.1.19 --depth 1 git://git.musl-libc.org/musl
      cd musl

      local opts1="--target=${ARCH} --host=${ARCH}"
      local opts2="--disable-shared --prefix=$TC/musl/install"
      local opts3="--exec-prefix=$TC/musl/install --enable-debug"
      local opts4="--syslibdir=$TC/musl/install/lib"

      run_command2 "./configure $opts1 $opts2 $opts3 $opts4" configure.log

      # Unfortunately, musl's build system does not support reliably parallel
      # builds with make -j. That does not mean that make -j will usually fail.
      # It means that *sometimes* make -j will fail OR produce corrupted objects
      # (without failing the build!) leading to weird link errors in user apps.
      # For that reason, it's just much more convenient to NOT use parallel
      # builds.

      run_command2 "make" build.log
      run_command2 "make install" make_install.log

      cd $TC/musl/install/bin
      cp musl-gcc musl-g++
      sed -i 's/-${ARCH}-gcc/-${ARCH}-g++/' musl-g++

      cd $TC/musl/install/include
      ln -s /usr/include/linux .
      ln -s /usr/include/asm-generic .

      if [ -d /usr/include/asm ]; then
         ln -s /usr/include/asm .
      elif [ -d /usr/include/${HOST_ARCH}-linux-gnu/asm ]; then
         ln -s /usr/include/${HOST_ARCH}-linux-gnu/asm .
      else
         msg="WARNING: unable to find the linux include asm directory"
         echo msg >> make_install.log
         echo msg
      fi

   else
      show_skip_component_msg "LIBMUSL"
   fi

   export CC="$SYS_CC"
   export CXX="$SYS_CXX"
   export PATH="$saved_path"
   popd
}

##################################
# Build GNU EFI
##################################

all_funcs_list+=(build_gnuefi)
function build_gnuefi {

   pushd .

   if ! [ -d gnu-efi ]; then

      show_work_on_component_msg "GNU-EFI"

      # Note: using a gnu-efi's fork on GitHub instead of the official SF repo:
      #
      #     git://git.code.sf.net/p/gnu-efi/code
      #
      # exclusively for performance reasons: SF sometimes is too slow for
      # CI builds.

      local url="https://github.com/vvaltchev/gnu-efi-fork.git"
      git clone --branch 3.0.10 --depth 1 "$url" gnu-efi
      cd gnu-efi

      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then

         # Note: default case
         run_command2 "make ARCH=${BUILD_ARCH} -j" build_${BUILD_ARCH}.log
         local arch_flags="ARCH=${ARCH_EFI} prefix=${ARCH_GCC_TC}-linux-"
         run_command2 "make $arch_flags -j" build_${ARCH_EFI}.log

      else
         # Special case (HOST_ARCH == ARCH)
         # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.
         run_command2 "make ARCH=${ARCH_EFI} -j" build_${ARCH_EFI}.log
      fi


   else
      show_skip_component_msg "GNU-EFI"
   fi

   popd
}


##################################
# Download OVMF
##################################

all_funcs_list+=(download_ovmf)
function download_ovmf {

   pushd .

   if ! [ -d ovmf ]; then

      show_work_on_component_msg "OVMF"

      mkdir ovmf
      cd ovmf

      local url="https://www.kraxel.org/repos/jenkins/edk2/"
      wget -nd -r --no-parent -A 'edk2.git-ovmf-ia32*' "$url"
      wget -nd -r --no-parent -A 'edk2.git-ovmf-x64*' "$url"

      rpm2cpio edk2.git-ovmf-ia32* | cpio -idmv
      rpm2cpio edk2.git-ovmf-x64* | cpio -idmv

      mv ./usr/share/edk2.git/* .
      rm -rf ./usr
      rm -rf ./robots*
      rm -rf *.rpm

   else

      show_skip_component_msg "OVMF"
   fi

   popd
}

##################################
# Build busybox
##################################

function busybox_fix_config_file {

   # Remove the date-time row (in order to allow config diff to work)
   sed -i -e '4d' .config

   # Remove all empty lines
   sed -i '/CONFIG_/!d' .config

   # Sort all the lines
   sort -s .config > .config_sorted
   mv .config_sorted .config
}

all_funcs_list+=(config_busybox)
function config_busybox {

   if ! [ -d busybox ]; then
      echo "ERROR: busybox not found in toolchain"
      exit 1
   fi

   pushd busybox

   make menuconfig

   echo -n "Do you want to update busybox.config with the new config? [Y/n]: "
   read answer

   busybox_fix_config_file

   if [[ "$answer" == "" || "$answer" == "y" ]]; then
      cp .config $MAIN_DIR/other/busybox.config
      echo "Source file $MAIN_DIR/other/busybox.config UPDATED"
   fi

   popd
}

function internal_build_busybox {

   echo "Building busybox... "
   cp $MAIN_DIR/other/busybox.config .config

   if [[ "$HOST_ARCH" != "$BUILD_ARCH" ]]; then
      # Case HOST_ARCH == ARCH
      # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.
      export SYS_CC="$CC"
      export SYS_CXX="$CXX"
      export CC_POST_FLAGS="-specs $TC/musl/install/lib/musl-gcc.specs"
   fi

   export CROSS_COMPILE="${ARCH_GCC_TC}-linux-"

   run_command2 "make -j" build.log

   export CROSS_COMPILE=""
   export CC_POST_FLAGS=""

   busybox_fix_config_file

   # Save a copy of the last built .config file
   cp .config .last_build_config
}

all_funcs_list+=(build_busybox)
function build_busybox {

   pushd .

   if [ -d busybox ]; then
      s1=`sha1sum ./busybox/.config | cut -d " " -f 1`
      s2=`sha1sum ./busybox/.last_build_config | cut -d " " -f 1`

      if [ "$s1" != "$s2" ]; then

         echo "Busybox: .config != .last_build_config"
         echo -n "Do you want to rebuild with the new config? [Y/n]: "
         read answer

         if [[ "$answer" == "" || "$answer" == "y" ]]; then

            echo -n "Do you want an incremental build? [Y/n]: "
            read answer
            if [[ "$answer" == "" || "$answer" == "y" ]]; then
               pushd busybox
               internal_build_busybox
               popd
            else
               rm -rf busybox
            fi
         fi
      fi
   fi

   if ! [ -d busybox ]; then

      show_work_on_component_msg "BUSYBOX"

      local ver=1.28.4
      local tarname=busybox-$ver.tar.bz2

      download_file_in_cache "https://busybox.net/downloads" "$tarname"
      extract_cachefile_tar_bz $tarname busybox-$ver busybox

      pushd busybox
      internal_build_busybox
      popd

   elif [ "$REBUILD" == "1" ]; then

      pushd busybox
      internal_build_busybox
      popd

   else
      show_skip_component_msg "BUSYBOX"
   fi

   popd
}

all_funcs_list+=(build_ncurses)
function build_ncurses {

   pushd .

   if ! [ -d ncurses ]; then

      show_work_on_component_msg "NCURSES"

      local ver=6.1
      local tarname=ncurses-$ver.tar.gz

      download_file_in_cache "https://ftp.gnu.org/pub/gnu/ncurses" "$tarname"
      extract_cachefile_tar_gz $tarname ncurses-$ver ncurses

      mkdir -p ncurses/install
      cd ncurses

      opts1="--host=${ARCH_SHORT}-pc-linux-gnu --prefix=$TC/ncurses/install"
      opts2="--datarootdir=/usr/share --without-cxx --without-cxx-binding"
      opts3="--without-ada --without-manpages --without-dlsym"

      local saved_cc="$CC"

      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then

         # Default case
         export CC="${ARCH_GCC_TC}-linux-gcc"

      else

         # Case HOST_ARCH == ARCH
         # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.
         export SYS_CC="$CC"
         export SYS_CXX="$CXX"
         export CC_POST_FLAGS="-specs $TC/musl/install/lib/musl-gcc.specs"
         export CC="${ARCH_GCC_TC}-linux-gcc"
      fi


      run_command2 "./configure $opts1 $opts2 $opts3" configure.log
      run_command2 "make -j" build.log
      run_command2 "make install" install.log

      export CC_POST_FLAGS=""
      export CC="$saved_cc"

   else
      show_skip_component_msg "NCURSES"
   fi

   popd
}

all_funcs_list+=(build_zlib)
function build_zlib {

   pushd .

   if ! [ -d zlib ]; then

      show_work_on_component_msg "ZLIB"

      git clone --branch v1.2.11 --depth 1 https://github.com/madler/zlib
      cd zlib

      local p="$TC/zlib/install"

      if [[ "$HOST_ARCH" != "$BUILD_ARCH" ]]; then
         # Case HOST_ARCH == ARCH
         # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.
         export SYS_CC="$CC"
         export SYS_CXX="$CXX"
         export CC_POST_FLAGS="-specs $TC/musl/install/lib/musl-gcc.specs"
      fi

      export CROSS_PREFIX="${ARCH_GCC_TC}-linux-"

      run_command2 "./configure --prefix='$p' --static" configure.log
      run_command2 "make -j" build.log
      run_command2 "make install" install.log
      export CROSS_PREFIX=""

   else
      show_skip_component_msg "ZLIB"
   fi

   popd
}

all_funcs_list+=(build_tcc)
function build_tcc {

   pushd .

   if [ ! -d tcc ]; then

      DOWNLOAD_IGNORING_SYSCC="1"
      download_x86_gcc_toolchain
      DOWNLOAD_IGNORING_SYSCC=""

      show_work_on_component_msg "TCC"
      git clone git://repo.or.cz/tinycc.git tcc

      cd tcc
      local tc=$TC/$ARCH_TC_DIR

      # Variables for making the compiler to work on Tilck
      # Note: these vars are used by --crtprefix and --libpaths
      # and do not affect the compiler in case just -c is used to
      # compile a single C file, without linking.

      local p="/"
      local lib="/lib/$ARCH_GCC_TC-tilck-musl"

      # To test it on the Linux build machine
      # local p="$tc/tcc/install"
      # local lib=$tc/$ARCH_GCC_TC-buildroot-linux-musl/sysroot/lib

      local ldflags="-Wl,--oformat=$ARCH_ELF_NAME -static"


      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then

         : # Default case: do nothing, for the moment

      else

         # Case HOST_ARCH == ARCH
         # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.

         export SYS_CC="$CC"
         export SYS_CXX="$CXX"
         export CC_POST_FLAGS="-specs $TC/musl/install/lib/musl-gcc.specs"

         # Hack: unfortunately, while tcc's build system uses the
         # just-built tcc in order to build libtcc1.a and, one of its files
         # (bcheck.c) needs to include standard headers, which most of them
         # like stdlib.h get found because of fall-back logic in the compiler,
         # but the specific ones in sys, bits and gnu don't (they are included
         # indirectly by standard headers). Therefore, the `tcc` compiler
         # fall-backs to the path specified by -B.. (pointing to the project's
         # root directory). So, one dirty hack to workaround this problem is
         # just to symlink the missing dirs in the local directory. This avoids
         # touching tcc's build system's code.
         ln -s /usr/include/$ARCH-linux-gnu/sys include/
         ln -s /usr/include/$ARCH-linux-gnu/bits include/
         ln -s /usr/include/$ARCH-linux-gnu/gnu include/
      fi

      local flags="--enable-cross --cross-prefix=$ARCH_GCC_TC-linux-"
      local flags="$flags --enable-static --cpu=$ARCH"
      local af="$flags --prefix=$p --extra-ldflags='$ldflags'"
      local af="$af --crtprefix=$lib --libpaths=$lib"

      run_command2 "./configure $af" configure.log
      run_command2 "make -j" build.log

      # Just to test on the local machine
      # run_command2 "make install" install.log

      # Note the configure --strip-binaries option does not work
      $ARCH_GCC_TC-linux-strip --strip-all $ARCH-tcc

   else

      show_skip_component_msg "TCC"
   fi

   popd
}

function arch_checks {

   if [[ "$HOST_ARCH" != *"$BUILD_ARCH"* ]]; then

      echo "WARNING: Tilck is designed to be built only on $BUILD_ARCH host "
      echo "machines no matter which target architecture has been chosen. "
      echo "Reason: the build system uses a toolchain pre-compiled for "
      echo "$BUILD_ARCH hosts."
      echo
      echo "Detected HOST_ARCH (uname -m): $HOST_ARCH"
      echo
      echo "The only (unofficially supported) scenario allowing "
      echo "HOST_ARCH != $BUILD_ARCH is to have HOST_ARCH == ARCH and the env "
      echo "variables USE_SYSCC, CC, CXX set correctly."
      echo

      if [[ "$HOST_ARCH" == "$ARCH" ]]; then

         if [[ "$USE_SYSCC" != "" && "$USE_SYSCC" != 0 ]]; then

            echo "In this case, HOST_ARCH == ARCH and USE_SYSCC is set."
            echo "The script can continue, but WARNING: this scenario is not "
            echo "tested as often as the main one (building on $BUILD_ARCH)."
            echo ""
            echo -n "Proceed [Y/n] ? "

            read ans

            if [[ "$ans" == "" || "$ans" == "y" || "$ans" == "Y" ]]; then
               echo "OK."
            else
               echo "Aborted."
               exit 1
            fi

         else

            echo "In this case USE_SYSCC, CC and CXX are NOT set."
            echo "Unable to continue."
            exit 1
         fi

      else

         echo "In this case, HOST_ARCH ($HOST_ARCH) != ARCH ($ARCH)"
         echo "Unable to continue."
         exit 1
      fi
   fi
}

function compiler_checks {

   if [[ "$USE_SYSCC" != "" && "$USE_SYSCC" != 0 ]]; then

      if [[ "$CC" == "" || "$CXX" == "" ]]; then

         echo "WARNING: CC and CXX should both be set when USE_SYSCC=1."
         echo -n "Do you want just to use gcc and g++? [Y/n] "
         read ans

         if [[ "$ans" == "" || "$ans" == "y" || "$ans" == "Y" ]]; then

            echo "----------------------------------------------------------"
            echo "Setting:"
            echo "   CC=gcc"
            echo "   CXX=g++"
            echo ""
            export CC="gcc"
            export CXX="g++"

         else

            echo "Aborted."
            exit 1
         fi
      fi

      cc_compiler="`$CC --version | cut -d ' ' -f 1 | head -1`"
      cxx_compiler="`$CXX --version | cut -d ' ' -f 1 | head -1`"

      if [[ "$cc_compiler" == "" ]]; then
         echo "ERROR: $CC compiler NOT FOUND"
         exit 1
      fi

      if [[ "$cxx_compiler" == "" ]]; then
         echo "ERROR: $CXX compiler NOT FOUND"
         exit 1
      fi

      if [ "$cc_compiler" != "gcc" ]; then
         echo "ERROR: USE_SYSCC=1 is NOT supported with compilers != GCC."
         exit 1
      fi

   fi
}

##########################################################
#
# MAIN
#
##########################################################

default_funcs=()

if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
   default_funcs+=(download_gcc_toolchain)   # note: this is the default case
else
   # We don't have our pre-build gcc-musl toolchains for HOST_ARCH, therefore
   # be *must* build also libmusl, in order to link with musl programs compiled
   # with the system compiler.
   default_funcs+=(build_libmusl)
fi

default_funcs+=(download_cmake)
default_funcs+=(build_gnuefi)
default_funcs+=(build_mtools)
default_funcs+=(build_zlib)

if [ -z "$NO_BUSYBOX" ]; then
   default_funcs+=(build_busybox)
fi

############################################################

if [[ "$1" == "--help" || "$1" == "-h" ]]; then

   echo ""
   echo "Syntax:"
   echo "      $0 [-n]        run default functions"
   echo "      $0 -s <func>   run a specific function"
   echo ""
   echo "   -n    Do not check nor install system packages (advanced)"
   echo "           Even if many packages are downloaded & built by this script"
   echo "           without touching the system, some packages are required to"
   echo "           be installed in the system. For example: wget, git, make,"
   echo "           binutils, bzip2, rpmextract and others similar. When -n"
   echo "           is NOT passed, the script first tries to detect the current"
   echo "           Linux distribution and then it checks if all the required"
   echo "           packages are already installed. In case some packages need"
   echo "           to be installed, this script will show a list and run:"
   echo "               sudo <package manager> <list>"
   echo "           In case the user does not want this script to install the "
   echo "           necessary packages he/she could just interrupt this script"
   echo "           with Ctrl+C, without affecting the system."
   echo ""
   echo "Functions supported by this script (with -s):"
   echo ""

   for x in ${all_funcs_list[@]}; do
      echo -n "   - $x"
      for y in ${default_funcs[@]}; do
         if [ "$x" == "$y" ]; then
            echo -n " (*)"
         fi
      done
      echo ""
   done

   echo ""
   echo -e "(*) Default functions\n"
   exit 0
fi


# Compiler-related checks
compiler_checks
# Arch-related checks
arch_checks

# Exit on the first failure
set -e

# Global toolchain directory
TC=$MAIN_DIR/toolchain

export PATH="$MAIN_DIR/scripts/build_scripts:$PATH"

if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
   GCC_TOOLCHAIN=$TC/$ARCH_TC_DIR/bin # Default cross-compiler, in $PATH.
   GCC_TOOLCHAIN_GLIBC=$TC/${ARCH_TC_DIR}_glibc/bin # NOTE: not in $PATH!

   # NOTE: GCC's musl pre-built toolchain overrides build_scripts/* in PATH.
   # This means that, when HOST_ARCH == BUILD_ARCH, i686-linux-gcc will use
   # its version and NOT the wrapper script in build_scripts which simulates
   # its behavior using -m32 and -specs.
   export PATH="$GCC_TOOLCHAIN:$PATH"
fi


mkdir -p $TC
mkdir -p $TC/cache
cd $TC

# Set the CMAKE variable in order to single functions to be able to use it
if [ -f $TC/cmake/bin/cmake ]; then
   CMAKE=$TC/cmake/bin/cmake
else
   CMAKE=cmake
fi


if [ "$1" == "-s" ]; then

   if [ $# -ne 2 ]; then
      echo "Expected the name of the function to call after the $1 option"
   fi

   func="$2"

   if [ -n "$(type -t $func)" ] && [ "$(type -t $func)" = function ]; then
      echo "[build_toolchain] Executing single function '$func'"
      $func
      echo "[build_toolchain] Executing single function: DONE"
   else
      echo "ERROR: The function '$func' does not exist."
      exit 1
   fi

   exit 0

fi

# Single-option parsing

if [ "$1" == "-n" ] || [ "$1" == "--skip-install-pkgs" ]; then
   skip_install=true
fi

# Do the actual job

if [ -z "$skip_install" ]; then
   install_packages
else
   echo "*** SKIPPING installation of packages"
fi

echo
echo "*** Building the custom toolchain ***"
echo

for x in ${default_funcs[@]}; do
   $x
done

echo
echo "*** Building custom toolchain COMPLETED ***"
echo
